name: Build and Release Debian Package

on:
  push:
    tags:
      - "v*"
jobs:
  build-deb:
    runs-on: self-hosted

    # Ensures that the default GITHUB_TOKEN can create/releases
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install tools
        run: |
          echo "Updating apt repos"
          sudo apt-get update
          echo "Installing dpkg dev package"
          sudo apt-get install -y dpkg-dev
          echo "Installing serial for python 3"
          sudo apt install python3-serial

      - name: Setup structure and files
        run: |
          # Create staging folder
          mkdir package
          # Copy all packaging content to staging
          chmod +x packaging/usr/local/bin/monitoring_tool
          cp -R packaging/* package/
          ls -lR packaging
          ls -lR package

          # Also copy the Python source into an appropriate location
          # so that it's packaged. We'll put it under /usr/local/share/monitoring_tool.
          if [ ! -d package/usr/local/share/monitoring_tool ]; then          
            mkdir -p package/usr/local/share/monitoring_tool/          
          fi
          # Change permissions to executable
          chmod 755 package/DEBIAN/postinst
          cp -R src/monitoring_listener.py package/usr/local/share/monitoring_tool/

          nagios_dir="/usr/lib/nagios"
          if [ ! -d $nagios_dir ]; then
            #create the nagios folder
            sudo mkdir -p $nagios_dir/plugins
          fi

          sudo mkdir -p /data/opt/LEDMonitoring
          sudo cp -R package/usr/local/share/nagios_check $nagios_dir/plugins/
          sudo cp -R package/usr/local/share/LEDMonitoring /data/opt/LEDMonitoring
      - name: Build Debian package
        id: build_deb
        run: |
            # Build .deb
            dpkg-deb --build package mytool_0.0.1.deb
      - name: Create or update GitHub Release
        id: create_release
        uses: actions/create-release@v1
            # Ensures that the default GITHUB_TOKEN can create/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # <-- Provided in env, not "with:"
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false 
      - name: Upload Debian artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # <-- Also required here
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          #making sure the name is same as the package created in section build debian package
          asset_path: mytool_0.0.1.deb
          asset_name: mytool_0.0.1.deb
          asset_content_type: application/octet-stream
